const { generateRandomBytes } = require('../../utils');

/**
 * @description The Client Random is sent in plaintext as 
 * part of the ClientHello message, allowing the server to 
 * incorporate it into subsequent cryptographic operations. 
 * It is concatenated with the Server Random (generated by 
 * the server) and used as input to derive various session 
 * keys, such as the master secret, which are then used to 
 * secure the communication channel.
 * 
 * Creates a randomly generated value that serves several 
 * purposes namely:
 * 
 *  - uniqueness - By using a randomly generated value, 
 *      the likelihood of two SSL/TLS sessions having 
 *      the same Client Random is extremely low.
 *  - entropy - helps enhance the security of the key 
 *      exchange and encryption process.
 *  - security - protect against replay attacks by 
 *      incorporating a time component.
 * 
 * IMPORTANT: 
 * first 4 bytes represent the current time in seconds
 * since the Unix epoch, and the remaining 28 bytes are
 * generated randomly. However, the timestamp can lead
 * to fingerprinting of hosts and servers, hence this
 * is removed in newer version of the protocol.
 * 
 * 
 * @returns {Buffer}
 */
function create() {
    const timestamp = Math.floor(Date.now() / 1000);
    
    const timestampBytes = [
        (timestamp >> 24) & 0xFF,
        (timestamp >> 16) & 0xFF,
        (timestamp >> 8) & 0xFF,
        timestamp & 0xFF
    ];

    const randomBytes = generateRandomBytes(28);

    return Buffer.from([...timestampBytes, ...randomBytes]);
}

function read(buffer) {
    const timestampBytes = buffer.slice(0, 4);
    const timestamp = timestampBytes.readUInt32BE(0);
    const randomBytes = buffer.slice(4);

    return {
        timestamp: timestamp,
        randomBytes: randomBytes
    };
}

module.exports = { create, read }