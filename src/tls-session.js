const { hexArray } = require('./utils');

/**
 * 
 * NOTES:
 * 
 * In the TLS context, a session ID is a unique identifier associated with a TLS session. It allows both the client and server to reference a previously established TLS session without having to perform a full handshake again. Session IDs are primarily used for session resumption, a feature that allows clients to resume previous TLS sessions with the same server, thereby reducing handshake latency and improving performance.

Here's how session IDs work and where they're kept:

1. **Generation**: During the TLS handshake, after the handshake is successfully completed, the server generates a session ID. This session ID is typically a random value that uniquely identifies the session. The server then sends the session ID to the client as part of the handshake response.

2. **Storage**: After the TLS handshake is completed, both the client and server store the session ID locally. The client may store the session ID in memory or in a cache, depending on the client's capabilities and configuration. Similarly, the server may store the session ID in memory or in a database, depending on the server's configuration and session management strategy.

3. **Session Resumption**: In subsequent TLS connections between the same client and server, the client includes the session ID in the handshake message. If the server recognizes the session ID and is willing to resume the session, it can use the stored session parameters (such as cryptographic keys) associated with that session ID to quickly establish the TLS connection without performing a full handshake again.

4. **Expiration**: Session IDs may have an expiration time or may be invalidated after a certain number of connections or time period to mitigate security risks, such as session hijacking or session fixation attacks.

Overall, session IDs play a crucial role in session resumption and improving the performance of TLS connections by allowing clients to resume previous sessions without the overhead of a full handshake. They are generated by the server during the handshake, stored by both the client and server, and used in subsequent connections for session resumption purposes.
 * 
The number of bytes allocated for a Session ID in TLS depends on the version of TLS being used and the specific implementation. In TLS 1.2, the length of the Session ID is variable and can be negotiated during the handshake.

Here's a brief overview:

TLS 1.2: In TLS 1.2, the length of the Session ID is negotiated during the handshake. After the ClientHello and ServerHello messages, the server sends a session ID with a length specified in bytes. This length can vary based on the implementation and configuration, but it's typically a few bytes long. The length of the Session ID is indicated by a single byte in the ServerHello message.

TLS 1.3: In TLS 1.3, the concept of a Session ID is somewhat deprecated in favor of a more efficient session resumption mechanism using session tickets. Session tickets are encrypted and contain the necessary session information, including keys and parameters, allowing for stateless session resumption. However, TLS 1.3 still supports Session IDs for compatibility with older versions of TLS and certain use cases. The length of the Session ID in TLS 1.3 is typically negotiated similarly to TLS 1.2.

In both TLS 1.2 and TLS 1.3, the Session ID length is typically kept relatively small to minimize the overhead of including it in handshake messages. It's common for Session IDs to be a few bytes long, but the exact length can vary based on implementation and configuration.
 * 
 */

function createSessionId() {
    return Buffer.from([0x00]);
}

function readSessionId(buffer) {
    return {
        _raw: hexArray(buffer),
        length: buffer.readUInt8(0)
    };
}

module.exports = { createSessionId, readSessionId }